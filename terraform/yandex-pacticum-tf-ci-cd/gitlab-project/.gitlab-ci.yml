stages:
  - validate
  - lint
  - plan
  - apply
  - destroy

workflow:
  name: 'Terraform Gitlab Yandex CI/CD'

image:
  name: hashicorp/terraform:1.8
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  YC_SERVICE_ACCOUNT_KEY_FILE: /tmp/sa-key.json
  PLAN_JSON: plan.json

before_script:
  # Создание файла с ключом доступа для Terraform 
  - echo ${YC_KEY} > /tmp/sa-key.json
  # Настройка зеркала для скачивания провайдеров, т. к. прямой доступ ограничен HashiCorp
  - |
    cat <<EOF >> ~/.terraformrc
    provider_installation {
      network_mirror {
        url = "https://terraform-mirror.yandexcloud.net/"
        include = ["registry.terraform.io/*/*"]
      }
      direct {
        exclude = ["registry.terraform.io/*/*"]
      }
    }
    EOF
  # Установка утилиты jq
  - apk --no-cache add jq
  # Создание алиаса для конвертации json отчёта
  - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  - terraform --version
  - terraform init

after_script:
  - which curl &> /dev/null || apk add curl || (apt update; apt -y install curl)
  - >
    curl -X POST
    -F parse_mode="markdown"
    -F disable_web_page_preview="True"
    -F chat_id="${CHAT_ID}"
    -F message_thread_id="2"
    -F text="Pipeline: [${CI_PIPELINE_NAME}/${CI_PIPELINE_ID}](${CI_PIPELINE_URL}), Job: [${CI_JOB_NAME}](${CI_JOB_URL}) => *${CI_JOB_STATUS}*"
    "https://api.telegram.org/bot${TG_TOKEN}/sendMessage"

validate:
  stage: validate
  script:
    - terraform validate

lint:checkov:
  stage: lint
  image: 
    name: bridgecrew/checkov:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.yml'
        - '**/*.yaml'
        - '**/*.json'
        - '**/*.template'
        - '**/*.tf'      
        - '**/serverless.yml'
        - '**/serverless.yaml'
  before_script: []
  script:
    - checkov -d . --compact --quiet --output json > checkov_report.json
  artifacts:
    paths:
      - checkov_report.json
    reports:
      sast: checkov_report.json
  allow_failure: true

lint:tflint:
  stage: lint
  image: 
    name: ghcr.io/terraform-linters/tflint:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'     
  before_script: []
  script:
    - tflint 

plan:
  stage: plan
  script:
    - terraform plan -out "planfile"
    - terraform show --json planfile | convert_report > $PLAN_JSON
  dependencies:
    - validate
  artifacts:
    paths:
      - planfile
    reports:
      terraform: $PLAN_JSON
 
apply:
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
  when: manual

destroy:
  stage: destroy
  script:
    - terraform destroy --auto-approve
  when: manual 